services:

  domain:
    build:
      context: ./domain
    container_name: domain
    deploy:
      resources:
        limits:
          memory: 512M
    ports:
      - "8585:8585"
      - "9090:9090"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://user:user@mongodb:27017/orders
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  gateway:
    build:
      context: ./gateway
    container_name: gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_REDIS_HOST=redis
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_GRPC_CLIENT_DOMAIN_SERVICE_ADDRESS=static://domain:9090
      - SPRING_REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
      domain:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    volumes:
      - mongodb_data:/data/db  # Том для хранения данных
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - app-network
    restart: always

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # Порт для взаимодействия приложений
      - "15672:15672"  # Порт для доступа к веб-интерфейсу управления
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-network
    restart: always

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: user
      ME_CONFIG_MONGODB_ADMINPASSWORD: user
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    restart: always

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always
    networks:
      - app-network
    volumes:
      - redis_data:/data  # Том для хранения данных

  elasticsearch:
    build:
      context: .  # Указываем текущую директорию как контекст сборки
      dockerfile: Dockerfile.elasticsearch  # Указываем имя Dockerfile
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Убирает требование авторизации
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  logstash:
    build:
      context: .
      dockerfile: Dockerfile.logstash
    container_name: logstash
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5044"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  kibana:
    image: elastic/kibana:7.17.0
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - app-network


volumes:
  mongodb_data:  # Том для хранения данных
  redis_data:

networks:
  app-network:
    external: true  # Указываем, что сеть уже существует
    driver: bridge